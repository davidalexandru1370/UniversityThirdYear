# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import main as module_0


def test_case_0():
    bool_0 = False
    str_0 = module_0.triangle(bool_0, bool_0, bool_0)
    assert str_0 == "Equilateral triangle"


def test_case_1():
    str_0 = "ZK3~=x\\w1=AQi%gxm"
    bool_0 = True
    int_0 = -1600
    str_1 = module_0.triangle(str_0, bool_0, int_0)
    assert str_1 == "Scalene triangle"


@pytest.mark.xfail(strict=True)
def test_case_2():
    int_0 = 2404
    set_0 = {int_0, int_0}
    bool_0 = True
    module_0.triangle(set_0, set_0, bool_0)


def test_case_3():
    bool_0 = True
    str_0 = module_0.triangle(bool_0, bool_0, bool_0)
    assert str_0 == "Equilateral triangle"
    none_type_0 = None
    bool_1 = False
    str_1 = module_0.triangle(none_type_0, none_type_0, bool_1)
    assert str_1 == "Isosceles triangle"

@pytest.mark.xfail(strict=True)
def test_case_4():
    bool_0 = True
    none_type_0 = None
    str_0 = module_0.triangle(bool_0, none_type_0, none_type_0)
    assert str_0 == "Isosceles triangle"
    dict_0 = {}
    bytes_0 = b"0=\x9c+\xc7t=\x8d"
    str_1 = "<J./7I(*Xd}( tD}_*"
    bool_1 = False
    bytes_1 = b"\xa2|\xc7\x93\x86\xbf\x10"
    tuple_0 = (bytes_0, str_1, bool_1, bytes_1)
    bool_2 = False
    module_0.triangle(dict_0, tuple_0, bool_2)
